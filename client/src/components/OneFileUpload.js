import React, { useState } from 'react';
import jsPDF from 'jspdf';
import axios from 'axios';
import './OneFileUpload.css';

const OneFileUpload = () => {
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [stage, setStage] = useState(0);
  const [reportGenerated, setReportGenerated] = useState(false);
  const [similarSongs, setSimilarSongs] = useState([]);

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleUpload = async () => {
    const formData = new FormData();
    formData.append('files', file);

    setLoading(true);
    setStage(1);

    try {
      await new Promise((resolve) => setTimeout(resolve, 2000));
      setStage(2);
      await new Promise((resolve) => setTimeout(resolve, 2000));
      setStage(3);
      await new Promise((resolve) => setTimeout(resolve, 2000));
      setLoading(false);
      setReportGenerated(true);
      setSimilarSongs([
        { name: "Song A", similarity: "85%", path: "songA.mp3" },
        { name: "Song B", similarity: "78%", path: "songB.mp3" },
      ]);
    } catch (error) {
      console.error('Error uploading files:', error);
      setLoading(false);
    }
  };

  const handleGenerateReport = async () => {
    const doc = new jsPDF();
    const username = "User"; // Replace with actual username
    const userId = localStorage.getItem('userId'); // Fetch userId from localStorage
    const date = new Date().toLocaleDateString();
    const accuracy = "95"; // Replace with actual accuracy
    const songName = file ? file.name : "Unknown";
  
    doc.text('SPECTRAL INSPECTOR', 20, 20);
    doc.text(`This report is generated by ${username} on ${date} by Spectral Inspector, a music plagiarism detector which uses sophisticated deep learning models with an accuracy of ${accuracy}%`, 20, 30);
    doc.text('Category: Audio Signature Match', 20, 40);
    doc.text('Genre: Pop', 20, 50);
  
    doc.text('YOUR CLIP', 20, 70);
    doc.text('This clip is from the song ' + songName, 20, 80);
  
    doc.text('PLAGIARIZED SEGMENT FOUND', 120, 70);
    doc.text('This clip is from the song [songname]', 120, 80);
    doc.text('Artist: [artist name]', 120, 90);
    doc.text('Release date: [release date]', 120, 100);
  
    doc.text('PLAGIARISM SCORE', 20, 120);
    doc.text('STATUS', 20, 130);
  
    doc.text('X %', 120, 120);
    doc.text('PLAGIARIZED', 120, 130);
  
    doc.text('Methodology:', 20, 150);
    doc.text('Audio signature match is a plagiarism model which looks for similar clips across a curated collection of songs from spectral inspectorâ€™s database.', 20, 160);
  
    doc.text('Architecture:', 20, 180);
    doc.addImage('architecture-image-path', 'JPEG', 20, 190, 160, 60); // Replace with the actual path or base64 string of the architecture image
  
    doc.text('Disclaimer:', 20, 270);
    doc.text('This model is still in beta phase and must only be used for analysis and preliminary confirmations, and cannot be held as proof in a court of law.', 20, 280);
  
    doc.text('Please provide your valuable feedback [link to feedback form]', 20, 290);
    doc.text('For more theoretical information, check out our paper [link]', 20, 300);
  
    const pdfBlob = doc.output('blob');

  const formData = new FormData();
  formData.append('report', pdfBlob, 'report.pdf');
  formData.append('userId', userId);

  try {
    const response = await axios.post('http://localhost:5000/upload-report', formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    });
    console.log(response.data.message);
  } catch (error) {
    console.error('Error uploading report:', error);
  }
  
    doc.save('report.pdf');
  };

  return (
    <div className="container">
      <h1>Audio Signature Matching</h1>
      <div className="file-input">
        <label>
          <input type="file" accept=".mp3" onChange={handleFileChange} style={{ display: 'none' }} />
          <button onClick={() => document.querySelector('input[type="file"]').click()}>Select File</button>
        </label>
      </div>
      {file && <p>Selected file: {file.name}</p>}
      <div>
        <button onClick={handleUpload}>Check Plagiarism</button>
      </div>
      {loading && (
        <div className="loading-stages">
          {stage === 1 && (
            <div className="stage">
              <div className="loading-bar"></div>
              <p>Preprocessing...</p>
            </div>
          )}
          {stage === 2 && (
            <div className="stage">
              <div className="hash-animation"></div>
              <p>Generating Signature...</p>
            </div>
          )}
          {stage === 3 && (
            <div className="stage">
              <div className="drum-animation"></div>
              <p>Comparing with Database...</p>
            </div>
          )}
        </div>
      )}
      {!loading && reportGenerated && (
        <div>
          <h2>Similar Songs</h2>
          {similarSongs.map((song, index) => (
            <div key={index} className="song">
              <p>{song.name} - {song.similarity}</p>
              <audio controls>
                <source src={song.path} type="audio/mp3" />
                Your browser does not support the audio element.
              </audio>
            </div>
          ))}
          <button onClick={handleGenerateReport}>View Report</button>
        </div>
      )}
    </div>
  );
};

export default OneFileUpload;
